# MIT License
#
# Copyright (c) 2022 Dilina Dehigama and EASE Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
name: Run scheduled experiments

on:
  workflow_dispatch:

jobs:
  build_client:
    name: Build framework
    runs-on: ubuntu-18.04
    env:
      working-directory: ./src
    steps:

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: continuous-benchmarking

      - name: Check syntax
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          working-directory: ${{env.working-directory}}
          args: --timeout 5m --skip-dirs raw-code
          skip-pkg-cache: true
          skip-build-cache: true

      - name: Build client binary
        working-directory: ${{env.working-directory}}
        run: |
          docker build -t stellar .
          docker create --name temp stellar /bin/bash

      - name: Package client artifact
        run: |
          mkdir -p "setup/deployment/raw-code"
          docker cp temp:/app/vhive-bench ./main
          docker cp temp:/app/setup/deployment/raw-code/functions setup/deployment/raw-code/functions
          tar -czvf build.tar ./main ./setup/deployment/raw-code/functions

      - name: Upload client artifact
        uses: actions/upload-artifact@v2
        with:
          name: STeLLAR-build
          path: build.tar
          retention-days: 1

  push_client_build_to_ec2:
    name: Push client artifact to EC2 instance
    needs: [ build_client ]
    runs-on: ubuntu-18.04
    env:
      working-directory: ./src
    steps:

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: continuous-benchmarking

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: SCP to EC2 instance
        env:
          PRIVATE_KEY: ${{ secrets.AWS_EC2_STELLAR_PRIVATE_KEY  }}
          HOSTNAME : ${{ secrets.HOSTNAME  }}
          USER_NAME : ${{ secrets.USER_NAME  }}
        working-directory: ${{env.working-directory}}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i private_key.pem ../build.tar ${USER_NAME}@${HOSTNAME}:~/  
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
              echo "Transfer successful"
              tar --strip-components=1 -xvf build.tar -C .
              ls
          '

  trigger-experiments:
    name: Remotely invoke the experiments in EC2 instance
    runs-on: ubuntu-latest
    needs: [ build_client, push_client_build_to_ec2 ]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: continuous-benchmarking
      - name: Login to EC2 instance
        env:
          PRIVATE_KEY: ${{ secrets.AWS_EC2_STELLAR_PRIVATE_KEY  }}
          HOSTNAME : ${{ secrets.HOSTNAME  }}
          USER_NAME : ${{ secrets.USER_NAME  }}

        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
            echo "Login Successful"
            ls
            echo "Running Warm Invocation Experiment"
          '