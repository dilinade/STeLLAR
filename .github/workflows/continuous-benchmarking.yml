# MIT License
#
# Copyright (c) 2022 Dilina Dehigama and EASE Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
name: Run scheduled experiments (New)

on: push
  
jobs:
  clean_up:
    name: Clean-up workspace
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ gcr, aws ]
    env:
      working-directory: ./src
    steps:
      - name: 'Cleanup build folder'
        run: |
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true

  build_client:
    name: Build framework
    needs: clean_up
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ gcr, aws ]
    env:
      working-directory: ./src
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking-new

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Build client binary
        working-directory: ${{env.working-directory}}
        run: CGO_ENABLED=0 go build -o stellar main.go 

      - name: Package client artifact
        working-directory: ${{env.working-directory}}
        run: tar -czvf build.tar ./stellar

      - name: Upload client artifact
        uses: actions/upload-artifact@v2
        with:
          name: STeLLAR-build
          path: ${{env.working-directory}}/build.tar
          retention-days: 1

  run_warm_experiments_aws:
    name: Run AWS warm function experiments
    needs: build_client
    runs-on: [self-hosted, aws]
    env:
      working-directory: src
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking-new

      - name: Configure AWS credentials using EASE lab account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-1

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set up Node.js 16.16.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Install Serverless framework and related plugins
        run: npm install -g serverless

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build
      
      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: AWS Warm Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: sudo ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/warm-function-invocations/warm-baseline-aws.json -db -w

  run_warm_experiments_gcr:
    name: Run GCR warm function experiments
    needs: build_client
    runs-on: [self-hosted, gcr]
    env:
      working-directory: src
      DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
      DOCKER_HUB_ACCESS_TOKEN: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
    steps:      
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking-new

      - id: "auth"
        name: Configure GCR credentials
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{secrets.GCR_CREDENTIALS}}"

      - name: "Set up gcloud"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: GCR Warm Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: sudo ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/warm-function-invocations/warm-baseline-gcr.json -db -w

  run_cold_experiments_aws:
    name: Run AWS cold function experiments
    needs: run_warm_experiments_aws
    runs-on: [self-hosted, aws]
    env:
      working-directory: src
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking-new
      - name: Configure AWS credentials using EASE lab account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-1

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set up Node.js 16.16.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Install Serverless framework and related plugins
        run: npm install -g serverless

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build
      
      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: AWS Cold Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: sudo ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/cold-function-invocations/cold-baseline-aws.json -db

  run_cold_experiments_gcr:
    name: Run GCR cold function experiments
    needs: run_warm_experiments_gcr
    runs-on: [self-hosted, gcr]
    env:
      working-directory: src
      DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
      DOCKER_HUB_ACCESS_TOKEN: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking-new

      - id: "auth"
        name: Configure GCR credentials
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{secrets.GCR_CREDENTIALS}}"

      - name: "Set up gcloud"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: GCR Cold Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: sudo ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/cold-function-invocations/cold-baseline-gcr.json -db
